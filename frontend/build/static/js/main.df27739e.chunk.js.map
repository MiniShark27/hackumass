{"version":3,"sources":["components/Score.js","components/Theme.js","components/Leaderboard.js","components/BallCount.js","App.js","reportWebVitals.js","theme.js","index.js"],"names":["Score","props","speech","useSpeechSynthesis","useEffect","text","score","speak","voice","voices","border","borderWidth","borderColor","boxShadow","borderRadius","p","m","size","fontSize","name","Theme","useColorMode","colorMode","toggleColorMode","onClick","Leaderboard","table","isNumeric","map","row","index","BallCount","count","App","useState","setTable","setScore","ballCount","setBallCount","setName","socket","setSocket","newsocket","io","on","data","leaderBoard","fetch","then","response","json","console","log","h","GameOver","balls","useDisclosure","isOpen","onOpen","onClose","handleNewGame","emit","id","isRequired","onKeyDown","e","keyCode","placeholder","value","onChange","target","isDisabled","colorScheme","mr","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df27739e.chunk.js","sourcesContent":["import { Box, Heading, Text } from \"@chakra-ui/layout\";\nimport { useEffect } from \"react\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\n\nexport default function Score(props) {\n  const speech = useSpeechSynthesis();\n  const say = (text) => {\n    speech.speak({\n      text: text,\n      voice: speech.voices[33],\n    });\n  };\n\n  useEffect(() => {\n    say(`You have ${props.score} points!`);\n  }, [props.score]);\n\n  return (\n    <Box\n      border\n      borderWidth={1}\n      borderColor={\"gray.500\"}\n      boxShadow={\"lg\"}\n      borderRadius={\"2xl\"}\n      p={5}\n      m={1}\n    >\n      <Heading size={\"4xl\"} fontSize={\"200\"}>\n        {props.score}\n      </Heading>\n      <Text>{props.name}</Text>\n    </Box>\n  );\n}\n","import { Button } from \"@chakra-ui/button\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\n\nexport default function Theme() {\n  const { colorMode, toggleColorMode } = useColorMode();\n  return (\n      <Button onClick={toggleColorMode} m={1}>\n        Toggle {colorMode === \"light\" ? \"Dark\" : \"Light\"}\n      </Button>\n  );\n}\n","import { Box } from \"@chakra-ui/layout\";\nimport { Table, Thead, Th, Tr, Td, Tbody } from \"@chakra-ui/react\";\n\nexport default function Leaderboard({ table }) {\n  // useEffect(() => {\n  //   setTable(data);\n  // }, [data]);\n  return (\n    <Box\n      border\n      borderWidth={1}\n      borderColor={\"gray.500\"}\n      boxShadow={\"lg\"}\n      borderRadius={\"xl\"}\n      p={2}\n      m={1}\n    >\n      <Table>\n        <Thead>\n          <Tr>\n            <Th>Name</Th>\n            <Th isNumeric>Score</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {table.map((row, index) => {\n            return (\n              <Tr key={`${index}-${row.name}`}>\n                <Td>{row.name}</Td>\n                <Td isNumeric>{row.score}</Td>\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </Table>\n    </Box>\n  );\n}\n","import { Box } from \"@chakra-ui/layout\";\n\nexport default function BallCount(props) {\n  return (\n    <Box\n      border\n      borderWidth={1}\n      p={3}\n      borderRadius={\"xl\"}\n      boxShadow={\"lg\"}\n      borderColor={\"gray.500\"}\n    >\n      Balls Left {props.count}\n    </Box>\n  );\n}\n","import {\n  ChakraProvider,\n  useDisclosure,\n  Button,\n  Modal,\n  ModalBody,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalCloseButton,\n  Input,\n} from \"@chakra-ui/react\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Center } from \"@chakra-ui/layout\";\nimport { io } from \"socket.io-client\";\nimport Score from \"./components/Score\";\nimport Theme from \"./components/Theme\";\nimport Leaderboard from \"./components/Leaderboard\";\nimport { useEffect, useState } from \"react\";\nimport BallCount from \"./components/BallCount\";\n\nexport default function App() {\n  const [table, setTable] = useState([]);\n  const [score, setScore] = useState(0);\n  const [ballCount, setBallCount] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    const newsocket = io(\"http://localhost:9000\");\n    setSocket(newsocket);\n    newsocket.on(\"gamedata\", (data) => {\n      setTable(data.leaderBoard);\n      setScore(data.score);\n      setBallCount(data.ballCount);\n      setName(data.name);\n    });\n  }, []);\n\n  useEffect(() => {\n    fetch(\"http://localhost:9000/data\")\n      .then((response) => response.json())\n      .then((data) => {\n        setScore(data.score);\n        setTable(data.leaderBoard);\n        setBallCount(data.ballCount);\n        console.log(data);\n      });\n  }, []);\n\n  return (\n    <ChakraProvider>\n      <Theme />\n      <Center h={\"40vh\"}>\n        <Score score={score} name={name} />\n        <BallCount count={ballCount} />\n      </Center>\n      <Center>\n        <Leaderboard data={table} table={table} />\n      </Center>\n      <GameOver balls={ballCount} score={score} socket={socket} />\n    </ChakraProvider>\n  );\n}\n\nfunction GameOver({ balls, score, socket }) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [name, setName] = useState(\"\");\n  const handleName = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleNewGame = () => {\n    console.log(\"new game\");\n    socket.emit(\"newgame\", { name: name });\n    onClose();\n  };\n\n  useEffect(() => {\n    if (balls === 0) {\n      onOpen();\n    }\n  }, [balls]);\n  return (\n    <>\n      <Button m={1} onClick={onOpen}>New Game</Button>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Game Over</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            You scored: {score}\n            <br />\n            Start a new game\n            <FormControl id=\"first-name\" isRequired>\n              <FormLabel>Name</FormLabel>\n              <Input\n                onKeyDown={(e) => {\n                  if (e.keyCode === 13) handleNewGame();\n                }}\n                placeholder=\"Your name\"\n                value={name}\n                onChange={handleName}\n              />\n              <Button m={1} onClick={handleNewGame} isDisabled={name === \"\"}>\n                Submit\n              </Button>\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// theme.js\n\n// 1. import `extendTheme` function\nimport { extendTheme } from \"@chakra-ui/react\";\n\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: \"light\",\n  useSystemColorMode: false,\n};\n\n// 3. extend the theme\nconst theme = extendTheme({ config });\n\nexport default theme;\n","import { ColorModeScript } from '@chakra-ui/color-mode';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}